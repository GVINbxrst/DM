from fastapi import FastAPI
from contextlib import asynccontextmanager
from src.database.connection import get_async_session  # re-export for tests patching
from src.api.middleware.metrics import PrometheusMiddleware
from src.api.routes import monitoring, signals, upload, auth, anomalies, admin_security, pipeline_status
import inspect
try:
    import httpx
    if 'app' not in inspect.signature(httpx.AsyncClient.__init__).parameters:  # –≤–µ—Ä—Å–∏—è httpx>=0.28
        _orig_ac_init = httpx.AsyncClient.__init__
        def _patched_ac_init(self, *args, app=None, base_url='', **kwargs):  # type: ignore
            if app is not None and 'transport' not in kwargs:
                from httpx import ASGITransport
                kwargs['transport'] = ASGITransport(app=app)
            if base_url and 'base_url' not in kwargs:
                kwargs['base_url'] = base_url
            return _orig_ac_init(self, **kwargs)
        httpx.AsyncClient.__init__ = _patched_ac_init  # type: ignore
except Exception:  # pragma: no cover
    pass
from src.utils.logger import setup_logging, get_logger
from src.utils.metrics import metrics_collector
from src.config.settings import get_settings

async def _maybe_run_startup_ingest():  # pragma: no cover - –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    st = get_settings()
    if not st.INGEST_STARTUP_DIR:
        return
    import os, asyncio
    from scripts.e2e_pipeline import run_pipeline  # type: ignore
    path = st.INGEST_STARTUP_DIR
    if not os.path.isdir(path):
        logger.warning(f"Startup ingest: –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω {path}")
        return
    logger.info(f"Startup ingest: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ {path}")
    try:
        await run_pipeline(path, None, st.INGEST_TRAIN_FULL, st.INGEST_FILE_PATTERN, st.INGEST_MAX_FILES)
        logger.info("Startup ingest –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        logger.warning(f"Startup ingest –Ω–µ —É–¥–∞–ª—Å—è: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_logging()
logger = get_logger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):  # pragma: no cover - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–∞–ø/—à—É—Ç–¥–∞—É–Ω
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DiagMod API")
    try:
        metrics_collector.update_system_metrics()
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception:  # –Ω–µ –≤–∞–ª–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –º–µ—Ç—Ä–∏–∫
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ", exc_info=True)
    # –ê–≤—Ç–æ–∏–Ω–∂–µ—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await _maybe_run_startup_ingest()
    yield
    try:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã DiagMod API")
    except Exception:
        pass

app = FastAPI(lifespan=lifespan)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫
app.add_middleware(PrometheusMiddleware)

# –ö–æ—Ä–Ω–µ–≤–æ–π health/root
@app.get("/")
async def root():
    return {"status":"healthy","message":"DiagMod API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ","version":"1.0.0"}
from sqlalchemy import text
from fastapi import HTTPException, status as http_status

@app.get("/health")
async def health_alias():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π health —á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ—Å—Ç–∞–º–∏.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:
     - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏ —Ç–µ–ª–æ —Å–æ status=="healthy", –∞ —Ç–∞–∫–∂–µ –∫–ª—é—á "checks" –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î
     - –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –≤–µ—Ä–Ω—É—Ç—å 503 –∏ status=="unhealthy"
    """
    checks = {}
    try:
        async with get_async_session() as session:  # type: ignore
            await session.execute(text("SELECT 1"))
        checks["database"] = {"status": "healthy"}
        return {"status": "healthy", "service": "diagmod-api", "version": "1.0.0", "checks": checks}
    except Exception:
        from fastapi.responses import JSONResponse
        return JSONResponse(status_code=http_status.HTTP_503_SERVICE_UNAVAILABLE, content={
            "status": "unhealthy", "service": "diagmod-api", "version": "1.0.0", "checks": checks
        })

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(monitoring.router, tags=["monitoring"], prefix="/monitoring", responses={404:{"description":"Not found"}})
app.include_router(signals.router, prefix="/api/v1", tags=["signals"])
app.include_router(upload.router, prefix="/api/v1", tags=["upload"])
app.include_router(anomalies.router, prefix="/api/v1", tags=["anomalies"])
app.include_router(auth.router, prefix="/api/v1", tags=["auth"])  # –≤–µ—Ä—Å–∏—è API
app.include_router(auth.router, prefix="/auth", tags=["auth"])    # legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
app.include_router(admin_security.router, prefix="/admin/security", tags=["admin-security"])  # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ security —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.include_router(pipeline_status.router, prefix="/api/v1", tags=["pipeline"])  # —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏

## –£–¥–∞–ª–µ–Ω—ã on_event startup/shutdown (–∑–∞–º–µ–Ω–µ–Ω—ã lifespan)
