"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–Ω–¥–æ–≤: –ø–æ—á–∞—Å–æ–≤–æ–π RMS –∏ —Ä–∏—Å–∫ (sequence LSTM)"""
import streamlit as st
import pandas as pd
import plotly.express as px
import requests
from datetime import datetime, timedelta

def render_trends(api_base_url: str, token: str, equipment_id: str):
    st.subheader("üìà –ü–æ—á–∞—Å–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã RMS")
    headers = {"Authorization": f"Bearer {token}"}
    limit = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç (—á–∞—Å–æ–≤)", min_value=24, max_value=24*14, value=24*7, step=24)
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤..."):
        try:
            r = requests.get(f"{api_base_url}/api/v1/equipment/{equipment_id}/rms/hourly", params={"limit": limit}, headers=headers, timeout=30)
            data = r.json().get('points', []) if r.status_code == 200 else []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {e}")
            data = []
    if not data:
        st.info("–ù–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    df = pd.DataFrame(data)
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–ª—é—á–µ–π
    if 'timestamp' in df.columns:
        df['ts'] = pd.to_datetime(df['timestamp'])
    elif 'ts' in df.columns:
        df['ts'] = pd.to_datetime(df['ts'])
    df = df.sort_values('ts')
    fig = px.line(df, x='ts', y='rms_mean', title='RMS (mean) –ø–æ —á–∞—Å–∞–º')
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üõ°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞ (sequence model)")
    horizon = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ–∫–æ–Ω)", min_value=3, max_value=24, value=5)
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫", type="primary"):
        with st.spinner("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞..."):
            try:
                r = requests.get(f"{api_base_url}/api/v1/signals/sequence_risk/{equipment_id}", params={"horizon": horizon}, headers=headers, timeout=60)
                if r.status_code == 200:
                    res = r.json()
                    st.metric("Risk score", f"{res.get('risk_score',0):.3f}")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {r.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ RMS (Prophet/Fallback)")
    fc_steps = st.slider("–®–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥ (—á–∞—Å–æ–≤)", min_value=6, max_value=72, value=24, step=6)
    if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ RMS"):
        with st.spinner("–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ forecast_rms (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
                # –û—Å–Ω–æ–≤–Ω–æ–π (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π) –ø—É—Ç—å /api/v1/forecast_rms/{equipment_id}; –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∞–ª–∏–∞—Å –Ω–∞ /anomalies/forecast_rms/
                r = requests.get(f"{api_base_url}/api/v1/forecast_rms/{equipment_id}", params={"steps": fc_steps}, headers=headers, timeout=120)
                if r.status_code == 404:
                    # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è API
                    r = requests.get(f"{api_base_url}/api/v1/anomalies/forecast_rms/{equipment_id}", params={"steps": fc_steps}, headers=headers, timeout=120)
                if r.status_code == 200:
                    data = r.json()
                    fc = data.get('forecast', [])
                    import pandas as pd
                    if fc:
                        df_fc = pd.DataFrame(fc)
                        import plotly.express as px
                        fig_fc = px.line(df_fc, x='timestamp', y='rms', title='–ü—Ä–æ–≥–Ω–æ–∑ RMS')
                        # –ü–æ—Ä–æ–≥
                        thr = data.get('threshold')
                        if thr is not None:
                            import plotly.graph_objects as go
                            fig_fc.add_hline(y=thr, line_dash='dash', line_color='red', annotation_text='threshold')
                        st.plotly_chart(fig_fc, use_container_width=True)
                        st.caption(f"–ú–æ–¥–µ–ª—å: {data.get('model')} ProbOver: {data.get('probability_over_threshold'):.3f}")
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {r.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
