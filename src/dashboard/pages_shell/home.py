"""–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π (–ª—ë–≥–∫–∏–π –¥–µ–º–æ‚Äë—Ä–µ–∂–∏–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫)."""
from __future__ import annotations

import os
from io import BytesIO
from typing import Dict, Any

from PIL import Image, ImageDraw, ImageFont
import requests
import streamlit as st


def _get_api_base() -> str:
    # –í compose —É –Ω–∞—Å API_URL, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ API_BASE_URL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return os.getenv("API_URL") or os.getenv("API_BASE_URL") or "http://api:8000"


def _demo_mode() -> bool:
    # –í–∫–ª—é—á–∞–µ–º –ª—ë–≥–∫–∏–π –¥–µ–º–æ‚Äë—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç API –∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
    return (os.getenv("DASHBOARD_TEST_DATA", "1").lower() in {"1", "true", "yes", "on"})


def _placeholder_image(status: str = "ok", size: tuple[int, int] = (320, 180)) -> Image.Image:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.

    –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞: ok ‚Äî –∑–µ–ª—ë–Ω—ã–π, warn ‚Äî –∂—ë–ª—Ç—ã–π, crit ‚Äî –∫—Ä–∞—Å–Ω—ã–π.
    """
    color_map = {
        "ok": (33, 186, 69),       # –∑–µ–ª—ë–Ω—ã–π
        "warn": (242, 192, 55),    # –∂—ë–ª—Ç—ã–π
        "crit": (219, 40, 40),     # –∫—Ä–∞—Å–Ω—ã–π
    }
    bg = color_map.get(status.lower(), (180, 180, 180))
    img = Image.new("RGB", size, bg)
    draw = ImageDraw.Draw(img)
    # —Ä–∞–º–∫–∞
    draw.rectangle([(0, 0), (size[0]-1, size[1]-1)], outline=(0, 0, 0), width=2)
    # —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
    text = {
        "ok": "Engine: OK",
        "warn": "Engine: WARN",
        "crit": "Engine: CRIT",
    }.get(status.lower(), "Engine")
    try:
        font = ImageFont.load_default()
    except Exception:
        font = None  # type: ignore
    w, h = draw.textsize(text, font=font)
    x = (size[0] - w) // 2
    y = (size[1] - h) // 2
    draw.text((x, y), text, fill=(0, 0, 0), font=font)
    return img


def render() -> None:
    st.title("üè† –ì–ª–∞–≤–Ω–∞—è")
    st.caption("–û–±–∑–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Å–∞–π–¥–±–∞—Ä–µ
    st.info(
        "–°–∞–π–¥–±–∞—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç.",
        icon="‚ÑπÔ∏è",
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    if st.button("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"):
        st.toast("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", icon="‚ö†Ô∏è")

    api = _get_api_base()
    headers = {}
    token = st.session_state.get("token") if isinstance(st.session_state, dict) else None
    if token:
        headers["Authorization"] = f"Bearer {token}"

    engines: list[Dict[str, Any]] = []
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è; –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –ø–æ–∑–∂–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º
        if not _demo_mode():
            r = requests.get(f"{api}/api/v1/equipment", headers=headers, timeout=10)
            if r.status_code == 200:
                engines = r.json() or []
    except Exception:
        engines = []

    if not engines:
        st.info(
            "–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π. –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            icon="‚ÑπÔ∏è",
        )
        st.write("\n")
        st.write("–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞.")
        # –î–µ–º–æ-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        engines = [
            {"id": "demo-ok", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å A (–¥–µ–º–æ)", "status": "ok"},
            {"id": "demo-warn", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å B (–¥–µ–º–æ)", "status": "warn"},
            {"id": "demo-crit", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å C (–¥–µ–º–æ)", "status": "crit"},
            {"id": "demo-ok-2", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å D (–¥–µ–º–æ)", "status": "ok"},
            {"id": "demo-warn-2", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å E (–¥–µ–º–æ)", "status": "warn"},
            {"id": "demo-ok-3", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å F (–¥–µ–º–æ)", "status": "ok"},
        ]
        # –ü–∞–¥–∞—Ç—å –≤–Ω–∏–∑ –Ω–∞ –æ–±—â–∏–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –µ—Å—Ç—å ‚Äî —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
    st.subheader("–î–≤–∏–≥–∞—Ç–µ–ª–∏")
    grid_cols = 3
    rows = (len(engines) + grid_cols - 1) // grid_cols
    idx = 0
    for _ in range(rows):
        cols = st.columns(grid_cols)
        for c in cols:
            if idx >= len(engines):
                break
            item = engines[idx]
            idx += 1
            with c:
                with st.container(border=True):
                    title = item.get("name") or item.get("id") or "–î–≤–∏–≥–∞—Ç–µ–ª—å"
                    status = (item.get("status") or "ok").lower()
                    if item.get("image_url") and not _demo_mode():
                        # –ï—Å–ª–∏ API –ø—Ä–∏—Å–ª–∞–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –Ω–µ –¥–µ–º–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                        st.image(item.get("image_url"), caption=str(title), use_container_width=True)
                    else:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
                        ph = _placeholder_image(status=status)
                        st.image(ph, caption=str(title), use_container_width=True)
                    st.caption(item.get("description") or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                    cols2 = st.columns(3)
                    with cols2[0]:
                        st.metric("ID", str(item.get("id")))
                    with cols2[1]:
                        # –°–≤–µ—Ç–æ—Ñ–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                        if status not in {"ok", "warn", "crit"}:
                            status = "ok"
                        color = {"ok": "#21ba45", "warn": "#f2c037", "crit": "#db2828"}[status]
                        label = {"ok": "–í—Å–µ —Ö–æ—Ä–æ—à–æ", "warn": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "crit": "–ö—Ä–∏—Ç–∏—á–Ω–æ"}[status]
                        st.markdown(f"<div style='display:flex;align-items:center;gap:6px'>"
                                    f"<span style='display:inline-block;width:10px;height:10px;border-radius:50%;background:{color}'></span>"
                                    f"<span>{label}</span>"
                                    f"</div>", unsafe_allow_html=True)
                    with cols2[2]:
                        st.metric("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", item.get("updated_at") or "‚Äî")
                    if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"open_engine_{item.get('id')}"):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        st.session_state["selected_equipment_id"] = item.get("id")
                        st.session_state["selected_equipment_name"] = title
                        st.session_state["selected_equipment_status"] = status
                        st.session_state["came_from_home"] = True
                        st.session_state["navigate_to"] = "–ê–Ω–æ–º–∞–ª–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑"
                        st.rerun()
