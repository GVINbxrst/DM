"""–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π (–ª—ë–≥–∫–∏–π –¥–µ–º–æ‚Äë—Ä–µ–∂–∏–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫)."""
from __future__ import annotations

import os
from io import BytesIO
from typing import Dict, Any

from PIL import Image, ImageDraw, ImageFont
import requests
import streamlit as st


def _get_api_base() -> str:
    # –í compose —É –Ω–∞—Å API_URL, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ API_BASE_URL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return os.getenv("API_URL") or os.getenv("API_BASE_URL") or "http://api:8000"


def _demo_mode() -> bool:
    # –í–∫–ª—é—á–∞–µ–º –ª—ë–≥–∫–∏–π –¥–µ–º–æ‚Äë—Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç API –∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
    return (os.getenv("DASHBOARD_TEST_DATA", "1").lower() in {"1", "true", "yes", "on"})


def _placeholder_image(status: str = "ok", size: tuple[int, int] = (160, 90)) -> Image.Image:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.

    –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞: ok ‚Äî –∑–µ–ª—ë–Ω—ã–π, warn ‚Äî –∂—ë–ª—Ç—ã–π, crit ‚Äî –∫—Ä–∞—Å–Ω—ã–π.
    """
    color_map = {
        "ok": (33, 186, 69),       # –∑–µ–ª—ë–Ω—ã–π
        "warn": (242, 192, 55),    # –∂—ë–ª—Ç—ã–π
        "crit": (219, 40, 40),     # –∫—Ä–∞—Å–Ω—ã–π
    }
    # –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ (RGBA), —Ç–æ–ª—å–∫–æ —Ä–∞–º–∫–∞ –∏ —Ç–µ–∫—Å—Ç
    img = Image.new("RGBA", size, (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    # —Ç–æ–Ω–∫–∞—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ä–∞–º–∫–∞
    draw.rectangle([(0, 0), (size[0]-1, size[1]-1)], outline=(0, 0, 0, 96), width=2)
    # —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
    text = {
        "ok": "–î–≤–∏–≥–∞—Ç–µ–ª—å: –•–æ—Ä–æ—à–æ",
        "warn": "–î–≤–∏–≥–∞—Ç–µ–ª—å: –í–Ω–∏–º–∞–Ω–∏–µ",
        "crit": "–î–≤–∏–≥–∞—Ç–µ–ª—å: –ö—Ä–∏—Ç–∏—á–Ω–æ",
    }.get(status.lower(), "–î–≤–∏–≥–∞—Ç–µ–ª—å")
    try:
        font = ImageFont.load_default()
    except Exception:
        font = None  # type: ignore
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫—Ä–æ—Å—Å-–≤–µ—Ä—Å–∏–π–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º textbbox, –∏–Ω–∞—á–µ ‚Äî fallback
    try:
        bbox = draw.textbbox((0, 0), text, font=font)
        w = bbox[2] - bbox[0]
        h = bbox[3] - bbox[1]
    except Exception:
        # Fallback: –æ—Ü–µ–Ω–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ç–æ—á–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
        try:
            # Pillow>=8: —É ImageFont –µ—Å—Ç—å getlength; –ø—Ä–∏–º–µ–º –≤—ã—Å–æ—Ç—É —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
            w = int(font.getlength(text)) if hasattr(font, "getlength") else max(8 * len(text), 40)  # type: ignore[union-attr]
            h = getattr(font, "size", 14) or 14  # type: ignore[union-attr]
        except Exception:
            w, h = max(8 * len(text), 40), 14
    x = (size[0] - w) // 2
    y = (size[1] - h) // 2
    draw.text((x, y), text, fill=(0, 0, 0, 230), font=font)
    return img


def _load_engine_image(size: tuple[int, int] = (160, 90)) -> Image.Image | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–≤–∏–≥–∞—Ç–µ–ª—è.

    –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø–æ –ø–æ—Ä—è–¥–∫—É):
    1) –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DASHBOARD_ENGINE_IMAGE (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å).
    2) –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: src/dashboard/assets/engine.png
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º PIL.Image –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏.
    """
    candidates: list[str] = []
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞—Å—Å–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω)
    here = os.path.dirname(__file__)
    assets_path = os.path.normpath(os.path.join(here, "..", "assets", "engine.png"))
    candidates.append(assets_path)
    # –ó–∞—Ç–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (fallback)
    env_path = os.getenv("DASHBOARD_ENGINE_IMAGE")
    if env_path:
        candidates.append(env_path)
    for p in candidates:
        try:
            if p and os.path.isfile(p):
                src = Image.open(p).convert("RGBA")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –≤–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º —Ñ–æ–Ω–µ
                img = Image.new("RGBA", size, (0, 0, 0, 0))
                tmp = src.copy()
                tmp.thumbnail(size, Image.LANCZOS)
                ox = (size[0] - tmp.width) // 2
                oy = (size[1] - tmp.height) // 2
                img.paste(tmp, (ox, oy), mask=tmp)
                return img
        except Exception:
            continue
    return None


def render() -> None:
    st.title("üè† –ì–ª–∞–≤–Ω–∞—è")
    st.caption("–û–±–∑–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Å–∞–π–¥–±–∞—Ä–µ
    st.info(
        "–°–∞–π–¥–±–∞—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç.",
        icon="‚ÑπÔ∏è",
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    if st.button("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"):
        st.toast("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", icon="‚ö†Ô∏è")

    api = _get_api_base()
    headers = {}
    token = st.session_state.get("token") if isinstance(st.session_state, dict) else None
    if token:
        headers["Authorization"] = f"Bearer {token}"

    engines: list[Dict[str, Any]] = []
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è; –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –ø–æ–∑–∂–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º
        if not _demo_mode():
            r = requests.get(f"{api}/api/v1/equipment", headers=headers, timeout=10)
            if r.status_code == 200:
                engines = r.json() or []
    except Exception:
        engines = []

    if not engines:
        st.info(
            "–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π. –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            icon="‚ÑπÔ∏è",
        )
        st.write("\n")
        st.write("–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞.")
        # –î–µ–º–æ-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        engines = [
            {"id": "demo-ok", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å A (–¥–µ–º–æ)", "status": "ok"},
            {"id": "demo-warn", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å B (–¥–µ–º–æ)", "status": "warn"},
            {"id": "demo-crit", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å C (–¥–µ–º–æ)", "status": "crit"},
            {"id": "demo-ok-2", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å D (–¥–µ–º–æ)", "status": "ok"},
            {"id": "demo-warn-2", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å E (–¥–µ–º–æ)", "status": "warn"},
            {"id": "demo-ok-3", "name": "–î–≤–∏–≥–∞—Ç–µ–ª—å F (–¥–µ–º–æ)", "status": "ok"},
        ]
        # –ü–∞–¥–∞—Ç—å –≤–Ω–∏–∑ –Ω–∞ –æ–±—â–∏–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –µ—Å—Ç—å ‚Äî —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
    st.subheader("–î–≤–∏–≥–∞—Ç–µ–ª–∏")
    # –°–¥–µ–ª–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ: –±–æ–ª—å—à–µ —Å—Ç–æ–ª–±—Ü–æ–≤, –º–µ–Ω—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    grid_cols = 4
    rows = (len(engines) + grid_cols - 1) // grid_cols
    idx = 0
    for _ in range(rows):
        cols = st.columns(grid_cols)
        for c in cols:
            if idx >= len(engines):
                break
            item = engines[idx]
            idx += 1
            with c:
                with st.container(border=True):
                    title = item.get("name") or item.get("id") or "–î–≤–∏–≥–∞—Ç–µ–ª—å"
                    status = (item.get("status") or "ok").lower()
                    # –ö–∞—Ä—Ç–∏–Ω–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é, –∏–Ω–∞—á–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                    img = _load_engine_image() or _placeholder_image(status=status)
                    st.image(img, caption=str(title), width="content")

                    # –ß—É—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
                    if item.get("description"):
                        st.caption(item.get("description"))
                    cols2 = st.columns(2)
                    with cols2[0]:
                        st.metric("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", str(item.get("id")))
                    with cols2[1]:
                        # –°–≤–µ—Ç–æ—Ñ–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                        if status not in {"ok", "warn", "crit"}:
                            status = "ok"
                        color = {"ok": "#21ba45", "warn": "#f2c037", "crit": "#db2828"}[status]
                        label = {"ok": "–í—Å–µ —Ö–æ—Ä–æ—à–æ", "warn": "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "crit": "–ö—Ä–∏—Ç–∏—á–Ω–æ"}[status]
                        st.markdown(f"<div style='display:flex;align-items:center;gap:6px'>"
                                    f"<span style='display:inline-block;width:10px;height:10px;border-radius:50%;background:{color}'></span>"
                                    f"<span>{label}</span>"
                                    f"</div>", unsafe_allow_html=True)
                    if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"open_engine_{item.get('id')}"):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        st.session_state["selected_equipment_id"] = item.get("id")
                        st.session_state["selected_equipment_name"] = title
                        st.session_state["selected_equipment_status"] = status
                        st.session_state["came_from_home"] = True
                        st.session_state["navigate_to"] = "–ê–Ω–æ–º–∞–ª–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑"
                        st.rerun()
