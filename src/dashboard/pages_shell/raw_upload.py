"""–°—Ç—Ä–∞–Ω–∏—Ü–∞: Raw Signals & Upload

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í–∏–¥–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ CSV.
- –§–æ—Ä–º–∞—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫ current_R,current_S,current_T; —Å—Ç—Ä–æ–∫–∏ ‚Äî —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ.
- –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫).
- –ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∑ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏.
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API /api/v1/upload (–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∑–∂–µ).
"""
from __future__ import annotations

import io
import os
from typing import List, Tuple

import pandas as pd
import streamlit as st
import plotly.graph_objects as go
import requests


EXPECTED_HEADER = ["current_R", "current_S", "current_T"]


def _get_api_base() -> str:
    return os.getenv("API_URL") or os.getenv("API_BASE_URL") or "http://api:8000"


def _decode_csv(file_bytes: bytes) -> str:
    for enc in ("utf-8", "cp1251", "utf-8-sig"):
        try:
            return file_bytes.decode(enc)
        except Exception:
            continue
    # –∫–∞–∫ fallback –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ latin-1
    return file_bytes.decode("latin-1", errors="ignore")


def _parse_csv(text: str) -> pd.DataFrame:
    # –ü—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
    try:
        df = pd.read_csv(io.StringIO(text), sep=",", engine="python")
    except Exception:
        # –∂–µ—Å—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ CSV ¬´–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π¬ª
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        if not lines:
            return pd.DataFrame(columns=EXPECTED_HEADER)
        header = lines[0].replace(" ", "")
        cols = header.split(",")
        data_rows = [ln.split(",") for ln in lines[1:]]
        df = pd.DataFrame(data_rows, columns=cols)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
    cols_lower = [c.strip() for c in df.columns]
    rename_map = {}
    for c in cols_lower:
        c_norm = c.replace(" ", "")
        if c_norm.lower() in {"current_r", "r", "phase_r"}:
            rename_map[c] = "current_R"
        elif c_norm.lower() in {"current_s", "s", "phase_s"}:
            rename_map[c] = "current_S"
        elif c_norm.lower() in {"current_t", "t", "phase_t"}:
            rename_map[c] = "current_T"
    if rename_map:
        df = df.rename(columns=rename_map)

    for col in EXPECTED_HEADER:
        if col not in df.columns:
            df[col] = None

    # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø—Ä–∏–≤–µ–¥—ë–º –∫ —á–∏—Å–ª—É
    df = df[EXPECTED_HEADER]
    for col in EXPECTED_HEADER:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    # –£–±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ —Ç—Ä–∏ NaN
    df = df.dropna(how="all")
    df = df.reset_index(drop=True)
    return df


def _preview_table(df: pd.DataFrame) -> None:
    st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)")
    st.dataframe(df.head(20), use_container_width=True)


def _plot_phases(df: pd.DataFrame, default: List[str] | None = None) -> None:
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∑ —Ç–æ–∫–∞")
    phases = [c for c in EXPECTED_HEADER if c in df.columns]
    if not phases:
        st.info("–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    sel = st.multiselect("–§–∞–∑—ã", phases, default=default or phases)
    if not sel:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–∞–∑—É")
        return
    fig = go.Figure()
    x = list(range(len(df)))
    # —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏: —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π –∏ –≥–æ–ª—É–±–æ–π, –ø–ª—é—Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–æ-—Å–∏–Ω–∏–π
    colors = {
        "current_R": "#003057",
        "current_S": "#0095D9",
        "current_T": "#5DC9F5",
    }
    for col in sel:
        fig.add_trace(go.Scatter(x=x, y=df[col], mode="lines", name=col, line=dict(color=colors.get(col))))
    fig.update_layout(height=400, xaxis_title="–û—Ç—Å—á—ë—Ç", yaxis_title="–¢–æ–∫ (–ê)", plot_bgcolor="#FFFFFF")
    st.plotly_chart(fig, use_container_width=True)


def _to_canonical_csv_bytes(df: pd.DataFrame) -> bytes:
    # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è /api/v1/upload
    out = io.StringIO()
    df_out = df[EXPECTED_HEADER].copy()
    df_out.to_csv(out, index=False)
    text = out.getvalue()
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ—á–Ω–æ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
    lines = text.splitlines()
    if not lines:
        return b""
    lines[0] = ",".join(EXPECTED_HEADER)
    return ("\n".join(lines) + "\n").encode("utf-8")


def _upload_via_api(csv_bytes: bytes, equipment_id: str | None, sample_rate: int | None, description: str | None) -> Tuple[bool, str]:
    api = _get_api_base()
    url = f"{api}/api/v1/upload"
    files = {
        "file": ("signal.csv", csv_bytes, "text/csv"),
    }
    data = {}
    if equipment_id:
        data["equipment_id"] = equipment_id
    if sample_rate:
        data["sample_rate"] = str(sample_rate)
    if description:
        data["description"] = description

    headers = {}
    token = st.session_state.get("token") if isinstance(st.session_state, dict) else None
    if token:
        headers["Authorization"] = f"Bearer {token}"

    try:
        r = requests.post(url, files=files, data=data, headers=headers, timeout=120)
        if r.status_code == 200:
            return True, r.text
        return False, f"{r.status_code}: {r.text}"
    except Exception as e:
        return False, f"request_error: {e}"


def render() -> None:
    st.title("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
    st.caption("CSV —Ñ–æ—Ä–º–∞—Ç–∞ current_R,current_S,current_T ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ API")

    # 1) –§–∏–ª—å—Ç—Ä—ã / –í—ã–±–æ—Ä
    with st.container(border=True):
        st.subheader("–í—ã–±–æ—Ä –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏")
        col1, col2 = st.columns([2, 1])
        with col1:
            uploaded = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"], accept_multiple_files=False)
        with col2:
            sample_rate = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏, –ì—Ü", min_value=1000, max_value=100000, value=25600, step=100)
        equipment_id = st.text_input("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (UUID, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    if uploaded is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª CSV –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–î")
        return

    # –ö—ç—à–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö
    if "uploaded_bytes" not in st.session_state:
        st.session_state.uploaded_bytes = uploaded.getvalue()
    elif uploaded.size != len(st.session_state.uploaded_bytes):
        st.session_state.uploaded_bytes = uploaded.getvalue()

    file_bytes = st.session_state.uploaded_bytes
    csv_text = _decode_csv(file_bytes)
    df = _parse_csv(csv_text)

    if df.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å CSV –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        return

    # 2) –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    with st.container(border=True):
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        _preview_table(df)
        _plot_phases(df)

    # 3) –î–µ–π—Å—Ç–≤–∏—è / –≠–∫—Å–ø–æ—Ä—Ç
    st.divider()
    with st.container(border=True):
        st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
        st.write("–§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ API /api/v1/upload. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫ 'current_R,current_S,current_T'.")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ API", type="primary"):
            with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."):
                csv_bytes = _to_canonical_csv_bytes(df)
                ok, msg = _upload_via_api(csv_bytes, equipment_id.strip() or None, int(sample_rate) if sample_rate else None, description.strip() or None)
                if ok:
                    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                    try:
                        st.json(pd.read_json(io.StringIO(msg)) if msg.strip().startswith("{") else msg)
                    except Exception:
                        st.text(msg)
                else:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {msg}")
