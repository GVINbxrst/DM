"""–°—Ç—Ä–∞–Ω–∏—Ü–∞: System Monitoring

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å Grafana (iframe), —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ.
- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–æ—Ü–µ–Ω—Ç –∞–Ω–æ–º–∞–ª–∏–π.
- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.
"""
from __future__ import annotations

import os
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

import streamlit as st
import requests


def _api() -> str:
    return os.getenv("API_BASE_URL", "http://localhost:8000")


def _auth_headers() -> Dict[str, str]:
    token = st.session_state.get("token") if isinstance(st.session_state, dict) else None
    return {"Authorization": f"Bearer {token}"} if token else {}


@st.cache_data(show_spinner=False, ttl=20)
def fetch_equipment() -> List[Dict[str, Any]]:
    url = f"{_api()}/api/v1/equipment"
    try:
        r = requests.get(url, headers=_auth_headers(), timeout=20)
        if r.status_code == 200:
            return r.json() or []
    except Exception:
        pass
    return []


@st.cache_data(show_spinner=False, ttl=20)
def fetch_signals_total(equipment_id: str) -> int:
    url = f"{_api()}/api/v1/signals"
    try:
        r = requests.get(url, params={"equipment_id": equipment_id, "page": 1, "page_size": 1}, headers=_auth_headers(), timeout=20)
        if r.status_code == 200:
            return int((r.json() or {}).get('total_count', 0))
    except Exception:
        pass
    return 0


@st.cache_data(show_spinner=False, ttl=20)
def fetch_anomalies_total_last_days(equipment_id: str, days: int = 30) -> int:
    end = datetime.utcnow().isoformat()
    start = (datetime.utcnow() - timedelta(days=days)).isoformat()
    url = f"{_api()}/api/v1/anomalies/{equipment_id}"
    try:
        r = requests.get(url, params={"start_date": start, "end_date": end, "page": 1, "page_size": 1}, headers=_auth_headers(), timeout=30)
        if r.status_code == 200:
            return int((r.json() or {}).get('total_anomalies', 0))
    except Exception:
        pass
    return 0


@st.cache_data(show_spinner=False, ttl=20)
def fetch_cluster_count() -> int:
    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º centroids –≤ distribution; –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ cluster_id –∏–∑ points; fallback ‚Äî –ø–æ labels
    try:
        r = requests.get(f"{_api()}/admin/clustering/distribution", headers=_auth_headers(), timeout=30)
        if r.status_code == 200:
            data = r.json() or {}
            cents = data.get('centroids')
            if isinstance(cents, list) and len(cents) > 0:
                return len(cents)
            pts = data.get('points')
            if isinstance(pts, list):
                uniq = {p.get('cluster_id') for p in pts if 'cluster_id' in p}
                return len(uniq)
    except Exception:
        pass
    try:
        r = requests.get(f"{_api()}/admin/clustering/labels", headers=_auth_headers(), timeout=20)
        if r.status_code == 200:
            labels = r.json() or []
            uniq = {row.get('cluster_id') for row in labels}
            return len(uniq)
    except Exception:
        pass
    return 0


def _auto_refresh(seconds: int = 30) -> None:
    # –í—Å—Ç–∞–≤–ª—è–µ–º meta-refresh —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    st.markdown(f"<meta http-equiv='refresh' content='{int(seconds)}'>", unsafe_allow_html=True)


def _grafana_url() -> str:
    base = os.getenv("GRAFANA_URL", "http://localhost:3000")
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å–∫—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è; –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å
    path = os.getenv("GRAFANA_DASHBOARD_PATH", "/d/diag/overview")
    params = os.getenv("GRAFANA_DASHBOARD_PARAMS", "?orgId=1&refresh=30s")
    # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if base.startswith("http://") or base.startswith("https://"):
        if base.endswith('/') and path.startswith('/'):
            base = base[:-1]
        return f"{base}{path}{params}"
    return "http://localhost:3000/d/diag/overview?orgId=1&refresh=30s"


def render() -> None:
    st.title("üñ•Ô∏è System Monitoring")
    st.caption("–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–∞–Ω–µ–ª—å Grafana")

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    _auto_refresh(30)

    # 1) –§–∏–ª—å—Ç—Ä—ã / –í—ã–±–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    with st.container(border=True):
        st.subheader("–§–∏–ª—å—Ç—Ä—ã")
        st.caption("–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –ø–æ –≤—Å–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")

    # 2) –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    with st.container(border=True):
        st.subheader("–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        eq = fetch_equipment()
        if not eq:
            st.info("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API")
        total_signals = 0
        total_anomalies = 0
        if eq:
            for e in eq:
                eid = str(e.get('id'))
                total_signals += fetch_signals_total(eid)
                total_anomalies += fetch_anomalies_total_last_days(eid, days=30)
        cluster_count = fetch_cluster_count()
        anomaly_pct = round((total_anomalies / max(1, total_signals)) * 100, 2)

        c1, c2, c3 = st.columns(3)
        c1.metric("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", total_signals)
        c2.metric("–ö–ª–∞—Å—Ç–µ—Ä–æ–≤", cluster_count)
        c3.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –∞–Ω–æ–º–∞–ª–∏–π (30 –¥–Ω–µ–π)", f"{anomaly_pct}%", help=f"–í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: {total_anomalies}")

    with st.container(border=True):
        st.subheader("Grafana")
        url = _grafana_url()
        st.write("–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å X-Frame-Options –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
        st.link_button("–û—Ç–∫—Ä—ã—Ç—å –≤ Grafana", url)
        try:
            from streamlit import components
            components.v1.iframe(src=url, height=800, scrolling=True)
        except Exception:
            st.write("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å iframe. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ.")

    # 3) –î–µ–π—Å—Ç–≤–∏—è / –≠–∫—Å–ø–æ—Ä—Ç (—Ä–µ–∑–µ—Ä–≤)
    st.divider()
    with st.container(border=True):
        st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
        st.caption("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç/–∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")

