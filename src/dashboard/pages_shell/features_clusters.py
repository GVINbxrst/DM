"""–°—Ç—Ä–∞–Ω–∏—Ü–∞: Features & Clusters

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –º–µ—Ç–æ–∫ –∏–∑ API.
- Scatter UMAP/HDBSCAN (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ü–∏—è; –∏–Ω–∞—á–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º).
- –í—ã–±–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç.
- –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ CSV.
"""
from __future__ import annotations

import os
from typing import Any, Dict, List, Optional

import pandas as pd
import plotly.express as px
import streamlit as st
import requests


def _api() -> str:
    # –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ API_URL (compose), –∑–∞—Ç–µ–º API_BASE_URL (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å), –∑–∞—Ç–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –∏–º—è
    return os.getenv("API_URL") or os.getenv("API_BASE_URL") or "http://api:8000"


def _auth_headers() -> Dict[str, str]:
    token = st.session_state.get("token") if isinstance(st.session_state, dict) else None
    return {"Authorization": f"Bearer {token}"} if token else {}


@st.cache_data(show_spinner=False, ttl=60)
def fetch_distribution(anomalies_only: bool = False) -> Dict[str, Any] | None:
    url = f"{_api()}/admin/clustering/distribution"
    try:
        r = requests.get(url, params={"anomalies_only": str(bool(anomalies_only)).lower()}, headers=_auth_headers(), timeout=60)
        if r.status_code == 200:
            return r.json()
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
    return None


@st.cache_data(show_spinner=False, ttl=60)
def fetch_labels() -> List[Dict[str, Any]]:
    url = f"{_api()}/admin/clustering/labels"
    try:
        r = requests.get(url, headers=_auth_headers(), timeout=30)
        if r.status_code == 200:
            return r.json() or []
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {e}")
    return []


def _build_scatter_data(dist: Dict[str, Any]) -> pd.DataFrame:
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ (reduced/points)
    # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: points: [{x,y,cluster_id,feature_id}], –∏–ª–∏ reduced: [[x,y],...], labels: [...]
    if isinstance(dist, dict):
        points = dist.get("points") or []
        if isinstance(points, list) and points and all(isinstance(p, dict) for p in points):
            df = pd.DataFrame(points)
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞
            if 'cluster' in df.columns and 'cluster_id' not in df.columns:
                df = df.rename(columns={'cluster': 'cluster_id'})
            return df
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: reduced + labels
        reduced = dist.get("reduced")
        labels = dist.get("labels")
        feats = dist.get("feature_ids")
        if isinstance(reduced, list) and isinstance(labels, list):
            rows = []
            for i, coords in enumerate(reduced):
                x, y = (coords[0], coords[1]) if isinstance(coords, (list, tuple)) and len(coords) >= 2 else (None, None)
                rows.append({
                    'x': x,
                    'y': y,
                    'cluster_id': labels[i] if i < len(labels) else None,
                    'feature_id': (feats[i] if isinstance(feats, list) and i < len(feats) else None)
                })
            return pd.DataFrame(rows)
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –±–µ—Ä—ë–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫–∞–∫ —Ç–æ—á–∫–∏
        clusters = dist.get("clusters") or []
        if isinstance(clusters, list) and clusters and all(isinstance(c, dict) for c in clusters):
            rows = []
            for c in clusters:
                cid = c.get('cluster_id')
                size = c.get('count') or c.get('size')
                cx, cy = None, None
                centroid = c.get('centroid') or c.get('center') or {}
                if isinstance(centroid, dict):
                    cx, cy = centroid.get('x'), centroid.get('y')
                rows.append({'x': cx, 'y': cy, 'cluster_id': cid, 'count': size})
            return pd.DataFrame(rows)
    return pd.DataFrame()


def _legend_from_labels(labels: List[Dict[str, Any]]) -> Dict[int, str]:
    legend = {}
    for row in labels:
        try:
            cid = int(row.get('cluster_id'))
            name = row.get('defect_id') or row.get('description') or f"–ö–ª–∞—Å—Ç–µ—Ä {cid}"
            legend[cid] = str(name)
        except Exception:
            continue
    return legend


def _export_cluster_csv(df_points: pd.DataFrame, cluster_id: int) -> bytes:
    cols = [c for c in ['feature_id', 'cluster_id', 'x', 'y'] if c in df_points.columns]
    data = df_points[df_points['cluster_id'] == cluster_id][cols].copy()
    return data.to_csv(index=False).encode('utf-8')


def render() -> None:
    st.title("üß≠ –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∫–ª–∞—Å—Ç–µ—Ä—ã")
    st.caption("–ü—Ä–∏–∑–Ω–∞–∫–∏ (RMS/FFT/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏) –∏ –∫–ª–∞—Å—Ç–µ—Ä—ã UMAP/HDBSCAN")

    # 1) –§–∏–ª—å—Ç—Ä—ã / –í—ã–±–æ—Ä
    with st.container(border=True):
        st.subheader("–§–∏–ª—å—Ç—Ä—ã")
        st.caption("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        anomalies_only = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞", value=False)

    dist = fetch_distribution(anomalies_only=anomalies_only)
    labels = fetch_labels()
    if not dist:
        st.info("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞–π–ø–ª–∞–π–Ω –∏–∑ –∞–¥–º–∏–Ω–∫–∏.")
        return

    legend_map = _legend_from_labels(labels)

    # 2) –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    with st.container(border=True):
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è")
        df_points = _build_scatter_data(dist)
        if df_points.empty or df_points[['x', 'y']].isnull().all(axis=None):
            st.warning("–ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏. –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö.")
        else:
            # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –º–µ—Ç–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'cluster_id' in df_points.columns and not df_points.empty:
                df_points['cluster_name'] = df_points['cluster_id'].map(legend_map).fillna(df_points['cluster_id'].astype(str))
            fig = px.scatter(
                df_points,
                x='x', y='y',
                color=('cluster_name' if 'cluster_name' in df_points.columns else 'cluster_id'),
                hover_data=[c for c in ['feature_id', 'cluster_id'] if c in df_points.columns],
                title=None,
                color_discrete_sequence=["#003057", "#0095D9", "#5DC9F5", "#0B1F35", "#7FB3D5"],
            )
            fig.update_layout(plot_bgcolor="#FFFFFF")
            st.plotly_chart(fig, use_container_width=True)

    # –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    clusters = dist.get('clusters') if isinstance(dist, dict) else None
    cluster_ids: List[int] = []
    if isinstance(clusters, list):
        for c in clusters:
            try:
                cid = int(c.get('cluster_id'))
                cluster_ids.append(cid)
            except Exception:
                continue
    elif 'labels' in (dist or {}):
        # —Å–æ–±–µ—Ä—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑ labels
        try:
            cluster_ids = sorted({int(x) for x in dist.get('labels') if x is not None})
        except Exception:
            cluster_ids = []

    with st.container(border=True):
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞")
        if not cluster_ids:
            st.info("–ö–ª–∞—Å—Ç–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.")
        else:
            cid = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä", cluster_ids, format_func=lambda c: legend_map.get(c, f"–ö–ª–∞—Å—Ç–µ—Ä {c}"))

            # –ü–æ–¥—Å—á—ë—Ç—ã
            count = None
            if isinstance(clusters, list):
                for c in clusters:
                    if c.get('cluster_id') == cid:
                        count = c.get('count') or c.get('size')
                        break
            if count is None and not df_points.empty and 'cluster_id' in df_points.columns:
                count = int((df_points['cluster_id'] == cid).sum())

            cols = st.columns(3)
            cols[0].metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", count if count is not None else 0)
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º (–µ—Å–ª–∏ points –µ—Å—Ç—å)
            if not df_points.empty:
                sel = df_points[df_points['cluster_id'] == cid]
                if 'x' in sel.columns and 'y' in sel.columns:
                    cols[1].metric("X median", f"{sel['x'].median():.3f}")
                    cols[2].metric("Y median", f"{sel['y'].median():.3f}")
            else:
                st.caption("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–µ–∫—Ü–∏–π.")

            # 3) –î–µ–π—Å—Ç–≤–∏—è / –≠–∫—Å–ø–æ—Ä—Ç
            st.divider()
            with st.container(border=True):
                st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
                if not df_points.empty and 'cluster_id' in df_points.columns:
                    csv_bytes = _export_cluster_csv(df_points, cid)
                    st.download_button(
                        "–≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ CSV",
                        data=csv_bytes,
                        file_name=f"cluster_{cid}.csv",
                        mime="text/csv",
                        type="primary",
                    )
                else:
                    st.caption("–≠–∫—Å–ø–æ—Ä—Ç CSV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç —Ç–æ—á–µ–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞.")

