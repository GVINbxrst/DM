x-app-common-env: &app-common-env
  REDIS_URL: "redis://redis:6379/0"
  CELERY_BROKER_URL: "redis://redis:6379/1"
  CELERY_RESULT_BACKEND: "redis://redis:6379/2"

services:
  postgres:
    extends:
      file: docker-compose.base.yml
      service: postgres
    environment:
      POSTGRES_DB: diagmod_dev
      POSTGRES_USER: diagmod_dev
      POSTGRES_PASSWORD: diagmod_dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    extends:
      file: docker-compose.base.yml
      service: redis
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: development
    environment:
      <<: *app-common-env
      DATABASE_URL: postgresql+asyncpg://diagmod_dev:diagmod_dev_password@postgres:5432/diagmod_dev
      LOG_LEVEL: DEBUG
      API_RELOAD: "true"
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      - postgres
      - redis
    networks:
      - diagmod_network

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      target: development
    environment:
      <<: *app-common-env
      DATABASE_URL: postgresql+asyncpg://diagmod_dev:diagmod_dev_password@postgres:5432/diagmod_dev
      LOG_LEVEL: DEBUG
      CELERY_WORKER_CONCURRENCY: 2
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    command: ["celery", "-A", "src.worker.celery_app", "worker", "--loglevel=debug", "--concurrency=2"]
    depends_on:
      - postgres
      - redis
    networks:
      - diagmod_network

  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
      target: development
    environment:
      API_URL: http://api:8000
      LOG_LEVEL: DEBUG
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml
    depends_on:
      - api
    networks:
      - diagmod_network

  jupyter:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: development
      args:
        INSTALL_DEV: "0"
        INSTALL_JUPYTER: "1"
        LIGHT_JUPYTER: "1"
    container_name: diagmod_jupyter
    environment:
      DATABASE_URL: postgresql+asyncpg://diagmod_dev:diagmod_dev_password@postgres:5432/diagmod_dev
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./src:/app/src
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
    ports:
      - "8888:8888"
    command: ["python", "-m", "jupyterlab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--notebook-dir=/app"]
    depends_on:
      - postgres
      - redis
    networks:
      - diagmod_network

  loader:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: development
    working_dir: /app
    command: ["bash"]
    environment:
      DATABASE_URL: postgresql+asyncpg://diagmod_dev:diagmod_dev_password@postgres:5432/diagmod_dev
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: DEBUG
    volumes:
      - ./data:/data:ro  # безопасный относительный путь
    depends_on:
      - postgres
      - redis
    networks:
      - diagmod_network
    profiles:
      - loader

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  diagmod_network:
    external: false
