 

x-app-common-env: &app-common-env
  REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0

services:
  postgres:
    extends:
      file: docker-compose.base.yml
      service: postgres
    environment:
      POSTGRES_DB: diagmod_prod
      POSTGRES_USER: diagmod_prod
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  redis:
    extends:
      file: docker-compose.base.yml
      service: redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: production
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - api_cache:/app/.cache
    ports:
      - "8000:8000"
    networks:
      - diagmod_network
    environment:
      <<: *app-common-env
      DATABASE_URL: postgresql+asyncpg://diagmod_prod:${POSTGRES_PASSWORD}@postgres:5432/diagmod_prod
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      LOG_LEVEL: WARNING
      API_WORKERS: 8
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    depends_on:
      - postgres
      - redis

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
      target: production
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - worker_cache:/app/.cache
    networks:
      - diagmod_network
    environment:
      <<: *app-common-env
      DATABASE_URL: postgresql+asyncpg://diagmod_prod:${POSTGRES_PASSWORD}@postgres:5432/diagmod_prod
      CELERY_WORKER_CONCURRENCY: 8
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      - postgres
      - redis

  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
      target: production
    ports:
      - "8501:8501"
    networks:
      - diagmod_network
    environment:
      API_URL: http://nginx/api
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
    depends_on:
      - api

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    networks:
      - diagmod_network
    volumes:
      - ./configs/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - api
      - dashboard

  certbot:
    image: certbot/certbot
    container_name: diagmod_certbot
    volumes:
      - ./configs/nginx/ssl:/etc/letsencrypt
      - ./configs/nginx/ssl-challenge:/tmp/acme-challenge
    command: >
      sh -c "while :; do
        certbot renew --webroot --webroot-path /tmp/acme-challenge --quiet
        sleep 12h
      done"
    depends_on:
      - nginx
    restart: unless-stopped
    profiles:
      - ops

  promtail:
    image: grafana/promtail:latest
    container_name: diagmod_promtail
    volumes:
      - ./logs:/var/log/diagmod:ro
      - ./configs/promtail/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - api
      - worker
    restart: unless-stopped
    profiles:
      - observability

volumes:
  postgres_data:
  redis_data:
  api_cache:
  worker_cache:

networks:
  diagmod_network:
    external: false
