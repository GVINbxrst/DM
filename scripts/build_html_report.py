#!/usr/bin/env python
"""Построение простого HTML отчёта по текущим данным.

Содержит:
- агрегаты (статусы raw, counts)
- топ 10 аномалий по уверенности
- распределение confidence (простая гистограмма svg)

Фокус: лёгкий статический файл без внешних зависимостей визуализации.
"""
from __future__ import annotations
import asyncio
from pathlib import Path
from io import StringIO
from math import floor
from typing import List
from statistics import mean

from sqlalchemy import select

from src.database.connection import get_async_session
from src.database.models import RawSignal, Feature, Prediction, ProcessingStatus


async def _collect_data():
    async with get_async_session() as session:
        # Raw statuses
        from sqlalchemy import func
        res = await session.execute(select(RawSignal.processing_status, func.count()).group_by(RawSignal.processing_status))
        raw_status = {str(r[0]): int(r[1]) for r in res.fetchall()}
        # Predictions
        preds_res = await session.execute(select(Prediction).order_by(Prediction.created_at.desc()).limit(500))
        preds: List[Prediction] = list(preds_res.scalars().all())
        anomalies = [p for p in preds if p.anomaly_detected]
        top_anoms = sorted(anomalies, key=lambda p: float(p.confidence), reverse=True)[:10]
        confidences = [float(p.confidence) for p in preds]
    return {
        'raw_status': raw_status,
        'pred_total': len(preds),
        'anom_total': len(anomalies),
        'top_anoms': top_anoms,
        'confidences': confidences
    }


def _hist_svg(values: List[float], bins: int = 20, width: int = 600, height: int = 120) -> str:
    if not values:
        return '<p>No confidence data</p>'
    mn, mx = min(values), max(values)
    if mx - mn < 1e-9:
        mx = mn + 1e-9
    step = (mx - mn) / bins
    counts = [0]*bins
    for v in values:
        idx = min(bins-1, floor((v - mn) / step))
        counts[idx] += 1
    max_count = max(counts) or 1
    bar_w = width / bins
    svg_parts = [f'<svg width="{width}" height="{height}" viewBox="0 0 {width} {height}" xmlns="http://www.w3.org/2000/svg">']
    for i,c in enumerate(counts):
        h = (c / max_count) * (height - 20)
        x = i * bar_w
        y = height - h - 10
        svg_parts.append(f'<rect x="{x:.1f}" y="{y:.1f}" width="{bar_w-1:.1f}" height="{h:.1f}" fill="#4F46E5" />')
    svg_parts.append('</svg>')
    return ''.join(svg_parts)


def _escape(s: str) -> str:
    return (s.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;'))


def build_html(data) -> str:
    hist = _hist_svg(data['confidences'])
    top_rows = []
    for p in data['top_anoms']:
        top_rows.append(
            f"<tr><td>{p.id}</td><td>{float(p.confidence):.3f}</td><td>{_escape(p.model_name)}</td><td>{p.model_version}</td></tr>"
        )
    rows_html = ''.join(top_rows) or '<tr><td colspan="4">Нет аномалий</td></tr>'
    raw_status_html = ''.join(f'<li>{k}: {v}</li>' for k,v in data['raw_status'].items()) or '<li>нет данных</li>'
    return f"""
<!DOCTYPE html><html lang='ru'><head><meta charset='utf-8'/><title>DiagMod Отчёт</title>
<style>
body{{font-family:Arial,Helvetica,sans-serif;margin:20px;background:#f8f9fb;color:#111}}
h1{{margin-top:0;font-size:20px}}
section{{background:#fff;padding:16px;margin-bottom:16px;border-radius:8px;box-shadow:0 1px 3px rgba(0,0,0,.08)}}
table{{border-collapse:collapse;width:100%}}
th,td{{font-size:12px;padding:6px 8px;border-bottom:1px solid #e5e7eb;text-align:left}}
th{{background:#f1f5f9;font-weight:600}}
.badge{{display:inline-block;background:#6366F1;color:#fff;padding:2px 6px;border-radius:4px;font-size:11px;margin-right:4px}}
footer{{font-size:11px;color:#555;margin-top:24px}}
</style></head><body>
<h1>Диагностический отчёт (MVP)</h1>
<section><h2>Агрегаты</h2>
<ul>{raw_status_html}</ul>
<p>Предсказаний: <b>{data['pred_total']}</b> | Аномалий: <b>{data['anom_total']}</b></p>
</section>
<section><h2>Распределение confidence</h2>{hist}</section>
<section><h2>Топ аномалий</h2>
<table><thead><tr><th>ID</th><th>Confidence</th><th>Model</th><th>Ver</th></tr></thead><tbody>{rows_html}</tbody></table>
</section>
<footer>Generated by build_html_report.py</footer>
</body></html>
"""


async def build_html_report(output_dir: str = "reports") -> Path:
    data = await _collect_data()
    html = build_html(data)
    out_dir = Path(output_dir)
    out_dir.mkdir(parents=True, exist_ok=True)
    out_path = out_dir / 'latest_report.html'
    out_path.write_text(html, encoding='utf-8')
    return out_path


if __name__ == '__main__':
    path = asyncio.run(build_html_report())
    print(f"HTML отчёт: {path}")
